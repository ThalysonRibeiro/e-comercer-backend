generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String            @id @default(cuid())
  status                 AccountStatus
  type                   AccountType
  name                   String?
  gender                 String?
  dateOfBirth            DateTime?
  email                  String            @unique
  phone                  String
  password               String?
  resetPasswordToken     String?
  resetPasswordExpires   DateTime?
  emailVerified          DateTime?
  emailVerificationToken String?
  googleId               String?           @unique
  avatar                 String?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  cpf_or_cnpj            String?
  acceptOffers           Boolean?          @default(false)
  acceptTerms            Boolean?          @default(false)
  documentType           String?
  addresses              Address[]
  cart                   Cart?
  order                  Order[]
  orderItems             OrderItems[]
  reviews                Review[]
  wishlist               Wishlist?
  notifications          Notifications[]
  userMetrics            UserMetric[]
  dashboardConfigs       DashboardConfig[]
}

model Product {
  id             String         @id @unique @default(uuid())
  title          String
  price          Decimal        @db.Decimal(10, 2)
  old_price      Decimal        @db.Decimal(10, 2)
  cost_price     Decimal        @default(0) @db.Decimal(10, 2) // preço de custo
  profit_margin  Decimal?       @db.Decimal(10, 2) // margem de lucro
  rating         Int?
  promotion_time Int?
  description    String
  products_sold  Int?
  endDate        DateTime?
  bigsale        Boolean        @default(false)
  sku            String         @unique
  stock          Int
  category       String
  brand          String
  tags           String[]
  weight         Float?
  width          Float?
  height         Float?
  length         Float?
  isActive       Boolean        @default(true)
  featured       Boolean        @default(false)
  categoryId     String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  emphasis       Boolean        @default(false)
  color          String[]
  size           String[]
  cartItem       CartItem[]
  images         Image[]
  orderItems     OrderItems[]
  Category       Category?      @relation(fields: [categoryId], references: [id])
  reviews        Review[]
  wishlistItem   WishlistItem[]
  stockEvents    StockEvent[]
}

model Image {
  id        String  @id @unique @default(uuid())
  image     String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Brands {
  id          String   @id @unique @default(uuid())
  name        String
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Address {
  id          String      @id @default(uuid())
  street      String
  number      String
  city        String
  state       String
  zip         String
  country     String
  complemento String?
  addressType AddressType @default(shipping)
  isDefault   Boolean     @default(false)
  userId      String?
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  order       Order[]
}

model Order {
  id                 String         @id @unique @default(uuid())
  userId             String
  total_amount       Decimal        @db.Decimal(10, 2)
  status             OrderStatus
  payment_status     PaymentStatus  @default(pending)
  payment_method     String
  total_quantity     Int
  addressId          String
  tracking_number    String?
  estimated_delivery DateTime?
  notes              String?
  coupon_code        String?
  discount_amount    Decimal        @db.Decimal(10, 2)
  paymentDetailsId   String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  address            Address        @relation(fields: [addressId], references: [id], onDelete: Cascade)
  paymentDetail      PaymentDetail? @relation(fields: [paymentDetailsId], references: [id])
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems         OrderItems[]
  transactions       Transaction[]
}

model OrderItems {
  id        String   @id @unique @default(uuid())
  orderId   String
  productId String
  userId    String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  options   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @unique @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  title     String?
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Coupon {
  id             String     @id @unique @default(uuid())
  code           String     @unique
  discount_value Int
  min_purchase   Decimal?   @db.Decimal(10, 2)
  max_usage      Int?
  used_count     Int        @default(0)
  end_date       DateTime
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  discount_type  CouponType
  start_date     Int
}

model Category {
  id          String     @id @unique @default(uuid())
  name        String
  description String?
  image       String?
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[] @relation("SubCategories")
  products    Product[]
}

model Wishlist {
  id        String         @id @unique @default(uuid())
  userId    String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]
}

model WishlistItem {
  id         String   @id @unique @default(uuid())
  wishlistId String
  productId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
}

model Cart {
  id             String     @id @unique @default(uuid())
  userId         String     @unique
  totalAmount    Decimal    @default(0) @db.Decimal(10, 2)
  totalItems     Int        @default(0)
  hasDiscount    Boolean    @default(false)
  discountAmount Decimal    @default(0) @db.Decimal(10, 2)
  appliedCoupon  String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items          CartItem[]
}

model CartItem {
  id         String   @id @unique @default(uuid())
  cartId     String
  productId  String
  quantity   Int
  price      Decimal  @db.Decimal(10, 2) // Preço unitário no momento da adição
  totalPrice Decimal  @db.Decimal(10, 2) // Preço × quantidade
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  color      String[]
  size       String[]
  cart       Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model PaymentDetail {
  id             String   @id @unique @default(uuid())
  provider       String
  transaction_id String?
  status         String
  last_four      String?
  card_type      String?
  amount         Decimal  @db.Decimal(10, 2)
  currency       String   @default("BRL")
  receipt_url    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  orders         Order[]
}

model SiteContent {
  id                String              @id @unique @default(uuid())
  banner            String?
  image_logo        String?
  title             String?
  metaTitle         String?
  metaDescription   String?
  favicon           String?
  service           String[]
  footerText        String?
  openingHours      String?
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  keywords          String[]
  image_openGraph   String?
  contactInfo       ContactInfo[]
  promotionHero     PromotionHero[]
  promotions        Promotions[]
  socialMedia       SocialMedia[]
  themeColors       ThemeColors[]
  institutionalLink InstitutionalLink[]
  movingTextHero    MovingTextHero[]
}

model Promotions {
  id            String      @id @unique @default(uuid())
  title         String
  slug          String      @unique //para url amigavel
  banner        String?
  video         String?
  description   String?
  discountType  String?
  discountValue Float?
  couponCode    String?
  isActive      Boolean     @default(true)
  endDate       DateTime?
  buttonText    String?
  buttonLink    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  siteContentId String
  startDate     Int?
  position      String      @default("")
  siteContent   SiteContent @relation(fields: [siteContentId], references: [id], onDelete: Cascade)
}

model PromotionHero {
  id            String      @id @unique @default(uuid())
  image         String?
  position      String?
  promotionLink String?
  isActive      Boolean     @default(true)
  order         Int         @default(0)
  endDate       DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  siteContentId String
  startDate     Int?
  siteContent   SiteContent @relation(fields: [siteContentId], references: [id], onDelete: Cascade)
}

model MovingTextHero {
  id            String      @id @unique @default(uuid())
  title         String?
  description   String?
  siteContentId String
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  siteContent   SiteContent @relation(fields: [siteContentId], references: [id], onDelete: Cascade)
}

model SocialMedia {
  id            String      @id @unique @default(uuid())
  siteContentId String
  name          String
  link          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  siteContent   SiteContent @relation(fields: [siteContentId], references: [id], onDelete: Cascade)
}

model ContactInfo {
  id            String      @id @unique @default(uuid())
  siteContentId String
  type          String
  value         String
  label         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  siteContent   SiteContent @relation(fields: [siteContentId], references: [id], onDelete: Cascade)
}

model ThemeColors {
  id             String      @id @unique @default(uuid())
  siteContentId  String
  nameTheme      String?
  isDarkTheme    Boolean?    @default(false)
  primaryColor   String?
  secondaryColor String?
  hover          String?
  danger         String?
  success        String? //Cor para mensagens de sucesso
  warning        String? //Cor para alertas ou avisos
  shadowColor    String? //Cor das sombras, se aplicável
  price          String?
  oldPrice       String?
  star           String?
  title          String?
  textColor      String?
  textHover      String?
  textButton     String?
  borderColor    String?
  bgCard         String?
  themeColor     String?
  bgFooterColor  String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  themeSelected  Boolean     @default(false)
  siteContent    SiteContent @relation(fields: [siteContentId], references: [id], onDelete: Cascade)
}

model InstitutionalLink {
  id            String      @id @unique @default(uuid())
  siteContentId String
  name          String
  link          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  siteContent   SiteContent @relation(fields: [siteContentId], references: [id], onDelete: Cascade)
}

model Notifications {
  id        String   @id @unique @default(uuid())
  title     String
  message   String
  is_read   Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// NOVOS MODELOS PARA DASHBOARD E BALANÇO

model Transaction {
  id          String          @id @unique @default(uuid())
  amount      Decimal         @db.Decimal(10, 2)
  type        TransactionType
  description String?
  category    String?
  orderId     String?
  order       Order?          @relation(fields: [orderId], references: [id])
  date        DateTime        @default(now())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model BalanceSummary {
  id          String     @id @unique @default(uuid())
  periodType  PeriodType
  periodValue String // "2024", "2024-05", "2024-W18", "2024-05-01", "all"
  startDate   DateTime
  endDate     DateTime
  totalSales  Decimal    @db.Decimal(12, 2)
  totalCost   Decimal    @db.Decimal(12, 2)
  profit      Decimal    @db.Decimal(12, 2)
  orderCount  Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model SalesStat {
  id                String     @id @unique @default(uuid())
  date              DateTime   @default(now()) // Data de referência
  periodType        PeriodType
  totalRevenue      Decimal    @db.Decimal(12, 2)
  totalOrders       Int
  averageOrderValue Decimal    @db.Decimal(10, 2)
  conversionRate    Decimal?   @db.Decimal(5, 2) // Porcentagem
  visits            Int? // Visitas ao site
  newCustomers      Int? // Novos clientes no período
  topProducts       Json? // Lista dos produtos mais vendidos
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model OperationalCost {
  id          String        @id @unique @default(uuid())
  name        String
  amount      Decimal       @db.Decimal(10, 2)
  type        CostType
  frequency   CostFrequency
  date        DateTime
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model StockEvent {
  id          String         @id @unique @default(uuid())
  productId   String
  product     Product        @relation(fields: [productId], references: [id])
  quantity    Int // Positivo para entrada, negativo para saída
  type        StockEventType
  reference   String? // Referência para pedido, ajuste manual, etc.
  notes       String?
  costPerUnit Decimal?       @db.Decimal(10, 2)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model MarketingCampaign {
  id          String         @id @unique @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  budget      Decimal        @db.Decimal(10, 2)
  spent       Decimal        @default(0) @db.Decimal(10, 2)
  revenue     Decimal        @default(0) @db.Decimal(10, 2)
  orders      Int            @default(0)
  clicks      Int            @default(0)
  conversions Int            @default(0)
  status      CampaignStatus
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model UserMetric {
  id                String          @id @unique @default(uuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id])
  totalSpent        Decimal         @default(0) @db.Decimal(12, 2)
  orderCount        Int             @default(0)
  averageOrderValue Decimal         @default(0) @db.Decimal(10, 2)
  lastPurchaseDate  DateTime?
  segment           CustomerSegment @default(NEW)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Tax {
  id          String            @id @unique @default(uuid())
  name        String
  rate        Decimal           @db.Decimal(5, 2) // Porcentagem
  description String?
  isActive    Boolean           @default(true)
  appliesTo   ProductCategory[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model ProductCategory {
  id        String   @id @unique @default(uuid())
  taxId     String
  tax       Tax      @relation(fields: [taxId], references: [id])
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DashboardConfig {
  id          String   @id @unique @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  layout      Json // Configuração do layout do dashboard
  favorites   String[] // Métricas favoritas
  hiddenItems String[] // Itens ocultos
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FinancialLog {
  id          String   @id @unique @default(uuid())
  type        String // "sale", "refund", "expense", etc.
  amount      Decimal  @db.Decimal(10, 2)
  description String?
  date        DateTime @default(now())
  reference   String? // ID da ordem, produto, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TokenBlacklist {
  id        String   @id @default(cuid())
  token     String   @unique
  createdAt DateTime @default(now())
}

// ENUMS

enum AccountType {
  useradmin
  userdefault
  usermoderator
}

enum AccountStatus {
  active
  inactive
}

enum OrderStatus {
  pending
  sent
  completed
  cancel
}

enum PaymentStatus {
  pending
  paid
  refunded
  partially_refunded
  failed
}

enum AddressType {
  shipping
  billing
  both
}

enum TransactionType {
  SALE
  REFUND
  EXPENSE
  OTHER_INCOME
}

enum PeriodType {
  DAILY
  WEEKLY
  MONTHLY
  ANNUAL
  ALL_TIME
}

enum CostType {
  FIXED // Custos fixos como aluguel, salários
  VARIABLE // Custos que variam como marketing
  SHIPPING // Custos de envio
  TAX // Impostos
  OTHER
}

enum CostFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUAL
  ONE_TIME
}

enum StockEventType {
  PURCHASE
  SALE
  RETURN
  ADJUSTMENT
  LOSS
}

enum CampaignStatus {
  PLANNED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum CustomerSegment {
  NEW
  RETURNING
  LOYAL
  VIP
  AT_RISK
  INACTIVE
}

enum CouponType {
  FIXED
  PERCENTAGE
}
