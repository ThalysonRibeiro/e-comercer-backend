generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  useradmin
  userdefault
}

enum AccountStatus {
  ativo
  inativo
}

enum OrderStatus {
  pending
  sent
  completed
  cancel
}

enum AddressType {
  shipping
  billing
  both
}

model User {
  id                     String        @id @default(cuid())
  status                 AccountStatus
  type                   AccountType
  name                   String?
  cpf_or_cnpj            String?
  genero                 String
  dateOfBirth            DateTime
  email                  String        @unique
  phone                  String
  password               String?
  resetPasswordToken     String?
  resetPasswordExpires   DateTime?
  emailVerified          DateTime?
  emailVerificationToken String?
  googleId               String?       @unique
  avatar                 String?
  orderItems             OrderItems[]
  order                  Order[]
  addresses              Address[]
  reviews                Review[]
  wishlist               Wishlist?
  cart                   Cart?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id             String         @id @unique @default(uuid())
  title          String
  price          Float
  old_price      Float
  rating         Int?
  promotion_time Int?
  description    String
  products_sold  Int
  endDate        DateTime?
  bigsale        Boolean        @default(false)
  sku            String         @unique
  stock          Int
  category       String
  brand          String
  tags           String[]
  weight         Float?
  width          Float?
  height         Float?
  length         Float?
  isActive       Boolean        @default(true)
  featured       Boolean        @default(false)
  emphasis       Boolean        @default(false)
  color          String[]
  size           String[]
  images         Image[]
  orderItems     OrderItems[]
  reviews        Review[]
  wishlistItem   WishlistItem[]
  cartItem       CartItem[]
  categoryId     String?
  Category       Category?      @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String  @id @unique @default(uuid())
  image     String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Address {
  id          String      @id @default(uuid())
  street      String
  number      String
  city        String
  state       String
  zip         String
  country     String
  complemento String?
  addressType AddressType @default(shipping)
  isDefault   Boolean     @default(false)
  userId      String?
  order       Order[]
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id                 String       @id @unique @default(uuid())
  userId             String
  total_amount       Float
  status             OrderStatus
  payment_method     String
  total_quantity     Float
  addressId          String
  tracking_number    String?
  estimated_delivery DateTime?
  notes              String?
  coupon_code        String?
  discount_amount    Float?
  orderItems         OrderItems[]
  paymentDetailsId   String?

  address       Address        @relation(fields: [addressId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentDetail PaymentDetail? @relation(fields: [paymentDetailsId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItems {
  id        String @id @unique @default(uuid())
  orderId   String
  productId String
  userId    String
  quantity  Int
  price     Float
  options   Json?

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @unique @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  title     String?
  images    String[]

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id             String   @id @unique @default(uuid())
  code           String   @unique
  discount_value Int
  discount_type  Int // percentage or fixed
  min_purchase   Float?
  max_usage      Int?
  used_count     Int      @default(0)
  start_date     Int
  end_date       DateTime
  isActive       Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String     @id @unique @default(uuid())
  name        String
  description String?
  image       String?
  parentId    String?
  parent      Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[] @relation("SubCategories")
  products    Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id     String         @id @unique @default(uuid())
  userId String         @unique
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  WishlistItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WishlistItem {
  id         String   @id @unique @default(uuid())
  wishlistId String
  productId  String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([wishlistId, productId])
}

model Cart {
  id     String     @id @unique @default(uuid())
  userId String     @unique
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String   @id @unique @default(uuid())
  cartId    String
  productId String
  quantity  Int
  color     String[]
  size      String[]
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentDetail {
  id             String  @id @unique @default(uuid())
  provider       String // stripe, paypal, etc.
  transaction_id String?
  status         String
  last_four      String?
  card_type      String?
  amount         Float
  currency       String  @default("BRL")
  receipt_url    String?
  orders         Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SiteContent {
  id              String          @id @unique @default(uuid())
  banner          String? // Banner principal
  video           String? // Vídeo principal
  bg_video        String? // Vídeo de fundo
  image_logo      String? // Logo do site
  title           String? // Título do site
  metaTitle       String? // Título para SEO
  metaDescription String? // Descrição para SEO
  keywords        String[] // Palavras-chave para SEO
  favicon         String? // Ícone do site
  footerText      String? // Texto do rodapé
  themeColor      String? // Cor principal do tema
  secondaryColor  String? // Cor secundária do tema
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  promotions      Promotions[]
  promotionHero   PromotionHero[]
  socialMedia     SocialMedia[]
  contactInfo     ContactInfo[]
}

model Promotions {
  id            String      @id @unique @default(uuid())
  title         String
  slug          String      @unique //para URLs amigáveis para promoções específica
  banner        String? // Imagem da promoção
  video         String? // Vídeo da promoção
  description   String? // Descrição da promoção
  discountType  String? // Percentual, valor fixo, etc.
  discountValue Float? // Valor do desconto
  couponCode    String? // Código de cupom associado
  isActive      Boolean     @default(true)
  startDate     Int? // Data de início
  endDate       DateTime? // Data de término
  buttonText    String? // Texto do botão CTA
  buttonLink    String? // Link do botão CTA
  position      String      @default("")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  siteContentId String
  siteContent   SiteContent @relation(fields: [siteContentId], references: [id], onDelete: Cascade)
}

model PromotionHero {
  id              String      @id @unique @default(uuid())
  title           String // Título principal
  subTitle        String // Subtítulo
  sale            String // Texto de oferta/desconto
  description     String // Descrição
  image           String // Imagem de destaque
  buttonText      String? // Texto do botão CTA
  buttonLink      String? // Link do botão CTA
  backgroundColor String? // Cor de fundo (para personalização)
  textColor       String? // Cor do texto
  position        String? // Posição no site (top, middle, bottom)
  isActive        Boolean     @default(true)
  order           Int         @default(0)
  startDate       DateTime? // Data de início
  endDate         DateTime? // Data de término
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  siteContentId   String
  siteContent     SiteContent @relation(fields: [siteContentId], references: [id], onDelete: Cascade)
}

model SocialMedia {
  id            String @id @unique @default(uuid())
  siteContentId String
  name          String
  link          String

  siteContent SiteContent @relation(fields: [siteContentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactInfo {
  id            String      @id @unique @default(uuid())
  siteContentId String
  type          String // email, phone, whatsapp, address
  value         String
  label         String? // ex: "Suporte", "Vendas", etc.
  siteContent   SiteContent @relation(fields: [siteContentId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
