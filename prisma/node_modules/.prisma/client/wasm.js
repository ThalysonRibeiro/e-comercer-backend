
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.6.0
 * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
 */
Prisma.prismaVersion = {
  client: "6.6.0",
  engine: "f676762280b54cd07c770017ed3711ddde35f37a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  status: 'status',
  type: 'type',
  name: 'name',
  cpf_or_cnpj: 'cpf_or_cnpj',
  genero: 'genero',
  dateOfBirth: 'dateOfBirth',
  email: 'email',
  phone: 'phone',
  password: 'password',
  resetPasswordToken: 'resetPasswordToken',
  resetPasswordExpires: 'resetPasswordExpires',
  emailVerified: 'emailVerified',
  emailVerificationToken: 'emailVerificationToken',
  googleId: 'googleId',
  avatar: 'avatar',
  acceptOffers: 'acceptOffers',
  acceptTerms: 'acceptTerms',
  documentType: 'documentType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  title: 'title',
  price: 'price',
  old_price: 'old_price',
  rating: 'rating',
  promotion_time: 'promotion_time',
  description: 'description',
  products_sold: 'products_sold',
  endDate: 'endDate',
  bigsale: 'bigsale',
  sku: 'sku',
  stock: 'stock',
  category: 'category',
  brand: 'brand',
  tags: 'tags',
  weight: 'weight',
  width: 'width',
  height: 'height',
  length: 'length',
  isActive: 'isActive',
  featured: 'featured',
  emphasis: 'emphasis',
  color: 'color',
  size: 'size',
  categoryId: 'categoryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ImageScalarFieldEnum = {
  id: 'id',
  image: 'image',
  productId: 'productId'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  street: 'street',
  number: 'number',
  city: 'city',
  state: 'state',
  zip: 'zip',
  country: 'country',
  complemento: 'complemento',
  addressType: 'addressType',
  isDefault: 'isDefault',
  userId: 'userId'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  total_amount: 'total_amount',
  status: 'status',
  payment_method: 'payment_method',
  total_quantity: 'total_quantity',
  addressId: 'addressId',
  tracking_number: 'tracking_number',
  estimated_delivery: 'estimated_delivery',
  notes: 'notes',
  coupon_code: 'coupon_code',
  discount_amount: 'discount_amount',
  paymentDetailsId: 'paymentDetailsId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemsScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  userId: 'userId',
  quantity: 'quantity',
  price: 'price',
  options: 'options',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  rating: 'rating',
  comment: 'comment',
  title: 'title',
  images: 'images',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CouponScalarFieldEnum = {
  id: 'id',
  code: 'code',
  discount_value: 'discount_value',
  discount_type: 'discount_type',
  min_purchase: 'min_purchase',
  max_usage: 'max_usage',
  used_count: 'used_count',
  start_date: 'start_date',
  end_date: 'end_date',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  image: 'image',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WishlistScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WishlistItemScalarFieldEnum = {
  id: 'id',
  wishlistId: 'wishlistId',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  productId: 'productId',
  quantity: 'quantity',
  color: 'color',
  size: 'size',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentDetailScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  transaction_id: 'transaction_id',
  status: 'status',
  last_four: 'last_four',
  card_type: 'card_type',
  amount: 'amount',
  currency: 'currency',
  receipt_url: 'receipt_url',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SiteContentScalarFieldEnum = {
  id: 'id',
  banner: 'banner',
  video: 'video',
  bg_video: 'bg_video',
  image_logo: 'image_logo',
  title: 'title',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  keywords: 'keywords',
  image_openGraph: 'image_openGraph',
  favicon: 'favicon',
  footerText: 'footerText',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PromotionsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  banner: 'banner',
  video: 'video',
  description: 'description',
  discountType: 'discountType',
  discountValue: 'discountValue',
  couponCode: 'couponCode',
  isActive: 'isActive',
  startDate: 'startDate',
  endDate: 'endDate',
  buttonText: 'buttonText',
  buttonLink: 'buttonLink',
  position: 'position',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  siteContentId: 'siteContentId'
};

exports.Prisma.PromotionHeroScalarFieldEnum = {
  id: 'id',
  title: 'title',
  subTitle: 'subTitle',
  sale: 'sale',
  description: 'description',
  image: 'image',
  buttonText: 'buttonText',
  buttonLink: 'buttonLink',
  backgroundColor: 'backgroundColor',
  textColor: 'textColor',
  position: 'position',
  isActive: 'isActive',
  order: 'order',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  siteContentId: 'siteContentId'
};

exports.Prisma.SocialMediaScalarFieldEnum = {
  id: 'id',
  siteContentId: 'siteContentId',
  name: 'name',
  link: 'link',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactInfoScalarFieldEnum = {
  id: 'id',
  siteContentId: 'siteContentId',
  type: 'type',
  value: 'value',
  label: 'label',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ThemeColorsScalarFieldEnum = {
  id: 'id',
  siteContentId: 'siteContentId',
  primaryColor: 'primaryColor',
  secondaryColor: 'secondaryColor',
  hover: 'hover',
  star: 'star',
  danger: 'danger',
  price: 'price',
  title: 'title',
  textColor: 'textColor',
  oldPrice: 'oldPrice',
  borderColor: 'borderColor',
  textButton: 'textButton',
  bgCard: 'bgCard',
  themeColor: 'themeColor',
  themeSelected: 'themeSelected',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.AccountStatus = exports.$Enums.AccountStatus = {
  ativo: 'ativo',
  inativo: 'inativo'
};

exports.AccountType = exports.$Enums.AccountType = {
  useradmin: 'useradmin',
  userdefault: 'userdefault'
};

exports.AddressType = exports.$Enums.AddressType = {
  shipping: 'shipping',
  billing: 'billing',
  both: 'both'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  pending: 'pending',
  sent: 'sent',
  completed: 'completed',
  cancel: 'cancel'
};

exports.Prisma.ModelName = {
  User: 'User',
  Product: 'Product',
  Image: 'Image',
  Address: 'Address',
  Order: 'Order',
  OrderItems: 'OrderItems',
  Review: 'Review',
  Coupon: 'Coupon',
  Category: 'Category',
  Wishlist: 'Wishlist',
  WishlistItem: 'WishlistItem',
  Cart: 'Cart',
  CartItem: 'CartItem',
  PaymentDetail: 'PaymentDetail',
  SiteContent: 'SiteContent',
  Promotions: 'Promotions',
  PromotionHero: 'PromotionHero',
  SocialMedia: 'SocialMedia',
  ContactInfo: 'ContactInfo',
  ThemeColors: 'ThemeColors'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
